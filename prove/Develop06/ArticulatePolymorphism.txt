Polymorphism is the ability for a line of code to change its behavior when needed, kind of like how a chameleon changes colors depending on the environment it's in.  The child class has the ability to change the base class when it needs to make changes. Kind of how a child doesn't inherit all their parent's characteristics, they have characteristics of their own, but in this case the child class does what it wants within reason and overrides the parent class.  Here's an example where the child class can override the parent class with whatever it's needs are. The Chameleon wants to change colors, so it does that in the program file public class Chameleon. Public virtual void ChangeColor(){console.WriteLine("See the Chameleon in its base green color.");}} public classColorChangingChameleon : Chameleon{public override void ChangeColor() {Console.WriteLine("See the bright orange and red Chameleon.");}} public class Program{public static void Main(){Chameleon myChameleon = new ColorChangingChameleon();myChameleon.ChangeColor(); This allows the for flexibility in the code and for it to be more easily maintained. 