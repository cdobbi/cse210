Abstraction is displaying something to be simple that is actually complex. When you look at a quilt [abstract class namespace QuiltAbstraction] what you see is a pretty handmade quilt that has the responsibility of keeping you warm. You don't think about the [abstract methods public void MakeQuilt(){ CutFabric(); SewPieces(); AddBatting(); EdgeQuilt();}}] hours spent cutting fabric, piecing tiny pieces together, the thread and sewing machine that's used to sew the quilt, how heavy the batting needs to be etc. There are also different types of quilts [derived classes public class PathworkQuilt: Quilt and other code] that require specific tools, patterns, fabric and a way of piecing it together that is different from all the others [Class Program{static void Main(string[] args){Quilt my quilt = new PatchworkQuilt(); myQuilt.MakeQuilt();}}}]. Abstraction hides the complex details of making a quilt/program, providing a simple finished product/interface [MakeQuilt] to create different types of quilts/programs. This is useful in writing and using programs because the abstraction can be used elsewhere for other projects increasing efficiency. 