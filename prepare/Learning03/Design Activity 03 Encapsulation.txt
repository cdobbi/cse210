CSE 210: Programming with Classes
Begin with Prayer
Discuss the Preparation Learning Activity
Take a minute to talk about the learning activity from this week. Talk through any difficulties that people had understanding the material or completing the activity.

What part of the learning activity was the hardest for you?
Guidance from a Mentor
Review the Program Specification
Refer to the Scripture Memorizer program specification. As a team, review the program requirements and how it is supposed to work.

What does the program do?
What user inputs does it have?
What output does it produce?
How does the program end?
Guidance from a Mentor
Determine the classes
The first step in designing a program like this is to think about the classes you will need. When thinking about classes, it is often helpful to consider the strong nouns in the program description.

What are good candidates for classes in this program?
What are the primary responsibilities of each class?
Guidance from a Mentor
Evaluate the Design
You could consider creating a Hider class that has the responsibility for hiding the words in the scripture. What would be drawbacks of creating a Hider class instead of leaving that responsibility to the Scripture and Word classes?
Define class behaviors
Now that you have decided on the classes, you will need and their responsibilities, the next step is to define the behaviors of these classes. These will become methods for the class.

Go through each of your classes and ask:

What are the behaviors this class will have in order to fulfill its responsibilities? (In other words, what things should this class do?)
Guidance from a Mentor
Evaluate the Design
Which other methods should be called by the Scripture class's HideRandomWords method to help do its work?
What is a benefit of the Reference class containing its own GetDisplayText method, instead of having the Scripture class display the book chapter and verse directly?
Define class attributes
Now that you have defined the classes, their responsibilities, and their behaviors, the next step is to determine what attributes the class should have, or what variables it needs to store.

Go through each of your classes and ask:

What attributes does this class need to fulfill its behaviors? (In other words, what variables should this class store?)
What are the data types of these member variables?
Guidance from a Mentor
Evaluate the Design
What is a benefit of the Scripture containing a list of Word objects instead of a list of strings?
Define Constructors
Now that you have defined the classes, including their behaviors and attributes, the next step is to think about the constructors that will be used to create new instances of these classes. Remember that you can create multiple constructors with different parameters to make it easy to work with your classes.

Remember that constructors help set up the initial state of the object, so you should consider what data is necessary for that initial state.

What constructors should each class have?

In other words, what parameters should you pass in when creating an object of that type.
What other work needs to be done to set up these objects?

For example, does the constructor need to run code to perform set up tasks, like creating lists, iterating through variables, etc.
Guidance from a Mentor
Evaluate the Design
What is a benefit of passing the string of the verse text to the Scripture constructor rather than a List of Word objects?
Review the Design
Take a minute to review your final design.

Are there any classes, methods, or variables, that you do not understand?
Guidance from a Mentor
Conclude
At this point, you have the design of the classes you will need for this project. If your design is not "perfect," or it needs to change as you begin working on the project, that is just fine! As you learn more details, you will naturally need to adjust your planning. This is why the principles of programming with class are so valuable, because they allow your program to easily change.

At the end of your meeting:

Determine who will be the lead student for the next meeting.
After the Meeting: Start the code
After the team activity, each person needs to individually do the the following:

Open the project in VS Code. Create new files that contain the "stubs" or empty code for all the classes, member variables, and functions in your design.

At this point the body of the methods can be empty, except for the necessary return statements.
Each class should be in its own file and the name of the file should match the class name.
Make sure that your program can build without errors.
Commit and push your code to your GitHub repository.
Submission
After completing this activity, Return to Canvas to submit two quizzes associated with this activity:

